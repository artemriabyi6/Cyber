"use client";
import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import { useEffect, useState } from "react";

// –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏ –¥–ª—è –¥–∞–Ω–∏—Ö
interface TrainingSession {
  id: string;
  title: string;
  duration: string;
  intensity: "low" | "medium" | "high";
  completed: boolean;
  exercises: string[];
  assignedTo: string[];
  date: string;
  completedDate?: string;
  performance: number;
  coachNotes: string;
}

interface Goal {
  id: string;
  userId: string;
  title: string;
  description?: string;
  targetValue: number;
  currentValue: number;
  status: string;
  deadline?: string;
}

interface NextTraining {
  id: string;
  userId: string;
  date: string;
  time: string;
  type: string;
  focus: string;
  trainingPlanId?: string | null;
}

interface StatisticsData {
  overview: {
    totalTrainings: number;
    completedTrainings: number;
    totalTrainingTime: number;
    averagePerformance: number;
    totalGoals: number;
    completedGoals: number;
    upcomingTrainings: number;
    successRate: number;
  };
  monthlyStats: {
    month: string;
    trainings: number;
    averagePerformance: number;
    totalDuration: number;
  }[];
  skillProgress: {
    skill: string;
    icon: string;
    current: number;
    previous: number;
    improvement: number;
    improvementPercent: string;
  }[];
  recentTrainings: TrainingSession[];
  goalsProgress: Goal[];
  nextTraining?: NextTraining;
  upcomingTrainings: TrainingSession[];
}

export default function StatisticsPage() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [statistics, setStatistics] = useState<StatisticsData | null>(null);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('overview');

  const fetchStatisticsData = async () => {
    try {
      setLoading(true);

      if (!session?.user?.id) {
        throw new Error("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π");
      }

      console.log('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è userId:', session.user.id);

      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ –∂ —Å–∞–º—ñ API —â–æ –π –≤ –∞—Ä—Ö—ñ–≤—ñ
      const [trainingPlansRes, goalsRes, nextTrainingsRes] = await Promise.all([
        fetch('/api/training-plans'),
        fetch('/api/goals'),
        fetch('/api/next-trainings')
      ]);

      console.log('–°—Ç–∞—Ç—É—Å–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:', {
        trainingPlans: trainingPlansRes.status,
        goals: goalsRes.status,
        nextTrainings: nextTrainingsRes.status
      });

      if (!trainingPlansRes.ok) {
        throw new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: ${trainingPlansRes.status}`);
      }

      const trainingPlans: TrainingSession[] = await trainingPlansRes.json();
      const goals: Goal[] = goalsRes.ok ? await goalsRes.json() : [];
      const nextTrainings: NextTraining[] = nextTrainingsRes.ok ? await nextTrainingsRes.json() : [];

      console.log('–û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ:', {
        trainingPlansCount: trainingPlans.length,
        trainingPlans: trainingPlans,
        goalsCount: goals.length,
        nextTrainingsCount: nextTrainings.length
      });

      // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const completedTrainings = trainingPlans.filter(training => training.completed);
      const totalTrainingTime = completedTrainings.reduce((total, training) => {
        const durationMatch = training.duration.match(/(\d+)/);
        return total + (durationMatch ? parseInt(durationMatch[1]) : 0);
      }, 0);

      const averagePerformance = completedTrainings.length > 0 
        ? completedTrainings.reduce((sum, training) => sum + (training.performance || 0), 0) / completedTrainings.length
        : 0;

      const successRate = trainingPlans.length > 0 
        ? Math.round((completedTrainings.length / trainingPlans.length) * 100)
        : 0;

      // –ú—ñ—Å—è—á–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const monthlyStats = calculateMonthlyStats(completedTrainings);
      
      // –ü—Ä–æ–≥—Ä–µ—Å –Ω–∞–≤–∏—á–æ–∫ (—Ç–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ)
      const skillProgress = calculateSkillProgress(completedTrainings);
      
      // –û—Å—Ç–∞–Ω–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
      const recentTrainings = trainingPlans.slice(0, 5);
      
      // –ú–∞–π–±—É—Ç–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
      const upcomingTrainings = trainingPlans.filter(training => !training.completed);

      const statisticsData: StatisticsData = {
        overview: {
          totalTrainings: trainingPlans.length,
          completedTrainings: completedTrainings.length,
          totalTrainingTime,
          averagePerformance: Math.round(averagePerformance),
          totalGoals: goals.length,
          completedGoals: goals.filter(goal => goal.status === 'completed').length,
          upcomingTrainings: upcomingTrainings.length,
          successRate
        },
        monthlyStats,
        skillProgress,
        recentTrainings,
        goalsProgress: goals,
        nextTraining: nextTrainings[0],
        upcomingTrainings
      };

      console.log('–§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', statisticsData.overview);
      setStatistics(statisticsData);
      
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –∑ –ø—É—Å—Ç–∏–º–∏ –¥–∞–Ω–∏–º–∏ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
      const emptyStats: StatisticsData = {
        overview: {
          totalTrainings: 0,
          completedTrainings: 0,
          totalTrainingTime: 0,
          averagePerformance: 0,
          totalGoals: 0,
          completedGoals: 0,
          upcomingTrainings: 0,
          successRate: 0
        },
        monthlyStats: [],
        skillProgress: [],
        recentTrainings: [],
        goalsProgress: [],
        upcomingTrainings: []
      };
      setStatistics(emptyStats);
    } finally {
      setLoading(false);
    }
  };

  // –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const calculateMonthlyStats = (trainings: TrainingSession[]) => {
    const monthlyData: { [key: string]: { count: number; totalPerformance: number; totalDuration: number } } = {};
    
    trainings.forEach(training => {
      if (training.completedDate || training.date) {
        const date = training.completedDate || training.date;
        const month = date.substring(0, 7); // YYYY-MM
        
        if (!monthlyData[month]) {
          monthlyData[month] = { count: 0, totalPerformance: 0, totalDuration: 0 };
        }
        
        monthlyData[month].count++;
        monthlyData[month].totalPerformance += (training.performance || 0);
        
        // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤ —Ö–≤–∏–ª–∏–Ω–∏
        const durationMatch = training.duration.match(/(\d+)/);
        const durationMinutes = durationMatch ? parseInt(durationMatch[1]) : 0;
        monthlyData[month].totalDuration += durationMinutes;
      }
    });

    return Object.entries(monthlyData).map(([month, data]) => ({
      month,
      trainings: data.count,
      averagePerformance: data.count > 0 ? Math.round(data.totalPerformance / data.count) : 0,
      totalDuration: data.totalDuration
    })).slice(-6);
  };

  const calculateSkillProgress = (trainings: TrainingSession[]) => {
    // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ä–µ–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
    const totalPerformance = trainings.reduce((sum, training) => sum + (training.performance || 0), 0);
    const avgPerformance = trainings.length > 0 ? totalPerformance / trainings.length : 0;
    
    // –ë–∞–∑–æ–≤—ñ –Ω–∞–≤–∏—á–∫–∏ –∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–∞–≥–∞–ª—å–Ω–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    const baseSkills = [
      { skill: '–î—Ä–∏–±–ª—ñ–Ω–≥', icon: '‚öΩ', base: 60 },
      { skill: '–£–¥–∞—Ä', icon: 'üéØ', base: 55 },
      { skill: '–ü–∞—Å', icon: 'üîÑ', base: 65 },
      { skill: '–§—ñ–∑–∏—á–Ω–∞ —Ñ–æ—Ä–º–∞', icon: 'üí™', base: 70 }
    ];

    return baseSkills.map(skill => {
      const current = Math.min(skill.base + Math.round((avgPerformance - 50) / 2), 95);
      const previous = Math.max(skill.base - 10, 30);
      const improvement = current - previous;
      const improvementPercent = previous > 0 ? ((improvement / previous) * 100).toFixed(1) : "0.0";

      return {
        skill: skill.skill,
        icon: skill.icon,
        current,
        previous,
        improvement,
        improvementPercent
      };
    });
  };

  const formatMonth = (monthString: string) => {
    if (!monthString) return '';
    const [year, month] = monthString.split('-');
    const date = new Date(parseInt(year), parseInt(month) - 1);
    return date.toLocaleDateString('uk-UA', { month: 'long', year: 'numeric' });
  };

  const formatDate = (dateString: string) => {
    if (!dateString) return '';
    try {
      return new Date(dateString).toLocaleDateString('uk-UA', {
        day: 'numeric',
        month: 'long',
        year: 'numeric'
      });
    } catch {
      return dateString;
    }
  };

  const formatDuration = (minutes: number) => {
    if (!minutes || minutes === 0) return '0 —Ö–≤';
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return hours > 0 ? `${hours} –≥–æ–¥ ${mins} —Ö–≤` : `${mins} —Ö–≤`;
  };

  const getPerformanceColor = (performance: number) => {
    if (performance >= 90) return 'text-green-600';
    if (performance >= 70) return 'text-yellow-600';
    if (performance >= 50) return 'text-orange-600';
    return 'text-red-600';
  };

  const getPerformanceBgColor = (performance: number) => {
    if (performance >= 90) return 'bg-green-100 text-green-800';
    if (performance >= 70) return 'bg-yellow-100 text-yellow-800';
    if (performance >= 50) return 'bg-orange-100 text-orange-800';
    return 'bg-red-100 text-red-800';
  };

  const getImprovementColor = (improvement: number) => {
    return improvement >= 0 ? 'text-green-600' : 'text-red-600';
  };

  const getIntensityColor = (intensity: string) => {
    switch (intensity) {
      case "high": return "text-red-500";
      case "medium": return "text-yellow-500";
      case "low": return "text-green-500";
      default: return "text-gray-500";
    }
  };

  const getIntensityText = (intensity: string) => {
    switch (intensity) {
      case "high": return "–í–∏—Å–æ–∫–∞";
      case "medium": return "–°–µ—Ä–µ–¥–Ω—è";
      case "low": return "–ù–∏–∑—å–∫–∞";
      default: return "–ù–µ –≤–∫–∞–∑–∞–Ω–æ";
    }
  };

  useEffect(() => {
    if (status === "unauthenticated") {
      router.push("/signin");
    } else if (status === "authenticated") {
      if (session.user?.role === "coach") {
        router.push("/coach-dashboard");
        return;
      }
      fetchStatisticsData();
    }
  }, [status, router]);

  if (status === "loading" || loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-100 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</p>
        </div>
      </div>
    );
  }

  if (!session) {
    return null;
  }

  if (!statistics) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-100 flex items-center justify-center">
        <div className="text-center">
          <p className="text-gray-600">–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</p>
          <button 
            onClick={fetchStatisticsData}
            className="mt-4 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
          >
            –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É
          </button>
        </div>
      </div>
    );
  }

  const { 
    overview,
    monthlyStats = [],
    skillProgress = [],
    recentTrainings = [],
    goalsProgress = [],
    nextTraining,
    upcomingTrainings = []
  } = statistics;

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-100">
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center space-x-4">
              <button
                onClick={() => router.push("/dashboard")}
                className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
              >
                <span className="text-lg">‚Üê</span>
              </button>
              <h1 className="text-2xl font-bold text-gray-900">üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h1>
            </div>
            <div className="flex items-center space-x-4">
              <div className="text-right">
                <p className="text-sm font-medium text-gray-900">
                  {session.user?.name}
                </p>
                <p className="text-sm text-gray-500">–£—á–µ–Ω—å</p>
              </div>
            </div>
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-6 mb-8">
          <div className="bg-white rounded-xl shadow-sm border p-6 text-center">
            <div className="text-2xl font-bold text-blue-600">{overview.completedTrainings}</div>
            <div className="text-sm text-gray-600">–ó–∞–≤–µ—Ä—à–µ–Ω–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å</div>
            <div className="text-xs text-gray-400 mt-1">–∑ {overview.totalTrainings}</div>
          </div>
          
          <div className="bg-white rounded-xl shadow-sm border p-6 text-center">
            <div className="text-2xl font-bold text-green-600">{overview.averagePerformance}%</div>
            <div className="text-sm text-gray-600">–°–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</div>
          </div>
          
          <div className="bg-white rounded-xl shadow-sm border p-6 text-center">
            <div className="text-2xl font-bold text-purple-600">{overview.successRate}%</div>
            <div className="text-sm text-gray-600">–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å</div>
          </div>
          
          <div className="bg-white rounded-xl shadow-sm border p-6 text-center">
            <div className="text-2xl font-bold text-orange-600">
              {formatDuration(overview.totalTrainingTime)}
            </div>
            <div className="text-sm text-gray-600">–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å</div>
          </div>
        </div>

        {/* –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –ø–æ –≤–∫–ª–∞–¥–∫–∞—Ö */}
        <div className="bg-white rounded-xl shadow-sm border mb-8">
          <div className="flex border-b overflow-x-auto">
            <button
              onClick={() => setActiveTab('overview')}
              className={`flex-1 px-6 py-3 font-medium whitespace-nowrap ${
                activeTab === 'overview'
                  ? 'text-green-600 border-b-2 border-green-600'
                  : 'text-gray-500 hover:text-gray-700'
              }`}
            >
              –û–≥–ª—è–¥
            </button>
            <button
              onClick={() => setActiveTab('progress')}
              className={`flex-1 px-6 py-3 font-medium whitespace-nowrap ${
                activeTab === 'progress'
                  ? 'text-green-600 border-b-2 border-green-600'
                  : 'text-gray-500 hover:text-gray-700'
              }`}
            >
              –ú—ñ–π –ø—Ä–æ–≥—Ä–µ—Å
            </button>
            <button
              onClick={() => setActiveTab('monthly')}
              className={`flex-1 px-6 py-3 font-medium whitespace-nowrap ${
                activeTab === 'monthly'
                  ? 'text-green-600 border-b-2 border-green-600'
                  : 'text-gray-500 hover:text-gray-700'
              }`}
            >
              –ü–æ –º—ñ—Å—è—Ü—è—Ö
            </button>
            <button
              onClick={() => setActiveTab('goals')}
              className={`flex-1 px-6 py-3 font-medium whitespace-nowrap ${
                activeTab === 'goals'
                  ? 'text-green-600 border-b-2 border-green-600'
                  : 'text-gray-500 hover:text-gray-700'
              }`}
            >
              –ú–æ—ó —Ü—ñ–ª—ñ
            </button>
          </div>

          <div className="p-6">
            {/* –í–∫–ª–∞–¥–∫–∞ –û–≥–ª—è–¥ */}
            {activeTab === 'overview' && (
              <div className="space-y-8">
                {/* –ì—Ä–∞—Ñ—ñ–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ */}
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">–ú–æ—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å</h3>
                  <div className="bg-gray-50 rounded-lg p-6">
                    {monthlyStats.length > 0 ? (
                      <div className="flex items-end justify-between h-32">
                        {monthlyStats.map((month, index) => (
                          <div key={month.month} className="flex flex-col items-center flex-1 mx-1">
                            <div
                              className="bg-green-500 rounded-t-lg w-full max-w-12 transition-all duration-500 hover:bg-green-600"
                              style={{ height: `${((month.averagePerformance || 0) / 100) * 80}px` }}
                              title={`${month.averagePerformance || 0}% - ${month.trainings || 0} —Ç—Ä–µ–Ω—É–≤–∞–Ω—å`}
                            ></div>
                            <div className="text-xs text-gray-600 mt-2 text-center">
                              {formatMonth(month.month).split(' ')[0]}
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="text-center py-8 text-gray-500">
                        –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                      </div>
                    )}
                  </div>
                </div>

                {/* –û—Å—Ç–∞–Ω–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è */}
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">–ú–æ—ó –æ—Å—Ç–∞–Ω–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è</h3>
                  <div className="space-y-3">
                    {recentTrainings.length > 0 ? (
                      recentTrainings.map((training) => (
                        <div key={training.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                          <div className="flex items-center space-x-3">
                            <span className="text-lg">‚öΩ</span>
                            <div>
                              <p className="font-medium text-gray-900">
                                {training.title}
                              </p>
                              <p className="text-sm text-gray-600">
                                {formatDate(training.completedDate || training.date)} ‚Ä¢ {training.duration}
                              </p>
                            </div>
                          </div>
                          <div className="flex items-center space-x-4">
                            <span className={`font-semibold ${getPerformanceColor(training.performance || 0)}`}>
                              {training.performance || 0}%
                            </span>
                            <span className={`text-xs px-2 py-1 rounded-full ${training.completed ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}`}>
                              {training.completed ? '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' : '–í –ø—Ä–æ—Ü–µ—Å—ñ'}
                            </span>
                          </div>
                        </div>
                      ))
                    ) : (
                      <div className="text-center py-4 text-gray-500">
                        –ù–µ–º–∞—î —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}

            {/* –í–∫–ª–∞–¥–∫–∞ –ü—Ä–æ–≥—Ä–µ—Å */}
            {activeTab === 'progress' && (
              <div className="space-y-6">
                <h3 className="text-lg font-semibold text-gray-900">–ú—ñ–π –ø—Ä–æ–≥—Ä–µ—Å –Ω–∞–≤–∏—á–æ–∫</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {skillProgress.length > 0 ? (
                    skillProgress.map((skill) => (
                      <div key={skill.skill} className="bg-gray-50 rounded-lg p-4">
                        <div className="flex items-center justify-between mb-3">
                          <div className="flex items-center space-x-3">
                            <span className="text-2xl">{skill.icon}</span>
                            <span className="font-medium text-gray-900">{skill.skill}</span>
                          </div>
                          <span className={`font-semibold ${getImprovementColor(skill.improvement || 0)}`}>
                            {(skill.improvement || 0) >= 0 ? '+' : ''}{skill.improvement || 0}%
                          </span>
                        </div>
                        
                        <div className="space-y-2">
                          <div className="flex justify-between text-sm text-gray-600">
                            <span>–ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å: {skill.current || 0}%</span>
                            <span>–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π: {skill.previous || 0}%</span>
                          </div>
                          
                          <div className="w-full bg-gray-200 rounded-full h-3">
                            <div
                              className="bg-gradient-to-r from-green-400 to-green-600 h-3 rounded-full transition-all duration-500"
                              style={{ width: `${skill.current || 0}%` }}
                            ></div>
                          </div>
                          
                          <div className="text-xs text-gray-500 text-center">
                            –ü–æ–ª—ñ–ø—à–µ–Ω–Ω—è: {skill.improvementPercent || '0'}%
                          </div>
                        </div>
                      </div>
                    ))
                  ) : (
                    <div className="col-span-2 text-center py-8 text-gray-500">
                      –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø—Ä–æ–≥—Ä–µ—Å –Ω–∞–≤–∏—á–æ–∫
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* –í–∫–ª–∞–¥–∫–∞ –ü–æ –º—ñ—Å—è—Ü—è—Ö */}
            {activeTab === 'monthly' && (
              <div className="space-y-6">
                <h3 className="text-lg font-semibold text-gray-900">–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º—ñ—Å—è—Ü—è—Ö</h3>
                <div className="space-y-4">
                  {monthlyStats.length > 0 ? (
                    monthlyStats.map((monthData) => (
                      <div key={monthData.month} className="bg-gray-50 rounded-lg p-4">
                        <div className="flex justify-between items-center mb-3">
                          <span className="font-medium text-gray-900">
                            {formatMonth(monthData.month)}
                          </span>
                          <span className="text-sm text-gray-600">
                            {monthData.trainings || 0} —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
                          </span>
                        </div>
                        
                        <div className="space-y-2">
                          <div className="flex justify-between text-sm text-gray-600">
                            <span>–°–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</span>
                            <span className={`font-semibold ${getPerformanceColor(monthData.averagePerformance || 0)}`}>
                              {monthData.averagePerformance || 0}%
                            </span>
                          </div>
                          
                          <div className="flex justify-between text-sm text-gray-600">
                            <span>–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å:</span>
                            <span className="font-semibold text-blue-600">
                              {formatDuration(monthData.totalDuration || 0)}
                            </span>
                          </div>
                          
                          <div className="w-full bg-gray-200 rounded-full h-2">
                            <div
                              className="bg-blue-500 h-2 rounded-full"
                              style={{ width: `${monthData.averagePerformance || 0}%` }}
                            ></div>
                          </div>
                        </div>
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-8 text-gray-500">
                      –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∑–∞ –º—ñ—Å—è—Ü—è–º–∏
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* –í–∫–ª–∞–¥–∫–∞ –¶—ñ–ª—ñ */}
            {activeTab === 'goals' && (
              <div className="space-y-6">
                <h3 className="text-lg font-semibold text-gray-900">–ú–æ—ó —Ü—ñ–ª—ñ</h3>
                <div className="space-y-4">
                  {goalsProgress.length > 0 ? (
                    goalsProgress.map((goal) => {
                      const progress = Math.min(Math.round(((goal.currentValue || 0) / (goal.targetValue || 1)) * 100), 100);
                      const daysLeft = goal.deadline ? Math.ceil((new Date(goal.deadline).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24)) : 0;
                      
                      return (
                        <div key={goal.id} className="bg-gray-50 rounded-lg p-4 border">
                          <div className="flex justify-between items-center mb-3">
                            <span className="font-medium text-gray-900">{goal.title}</span>
                            <span className={`text-sm px-2 py-1 rounded-full ${
                              goal.status === 'completed' ? 'bg-green-100 text-green-800' :
                              daysLeft < 0 ? 'bg-red-100 text-red-800' :
                              'bg-blue-100 text-blue-800'
                            }`}>
                              {goal.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' :
                               daysLeft < 0 ? '–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ' :
                               `–ó–∞–ª–∏—à–∏–ª–æ—Å—å ${daysLeft} –¥–Ω.`}
                            </span>
                          </div>
                          
                          <div className="space-y-2">
                            <div className="flex justify-between text-sm text-gray-600">
                              <span>–ü—Ä–æ–≥—Ä–µ—Å: {progress}%</span>
                              <span>{goal.currentValue || 0} / {goal.targetValue || 0}</span>
                            </div>
                            
                            <div className="w-full bg-gray-200 rounded-full h-3">
                              <div
                                className={`h-3 rounded-full transition-all duration-500 ${
                                  goal.status === 'completed' ? 'bg-green-500' :
                                  daysLeft < 0 ? 'bg-red-500' : 'bg-blue-500'
                                }`}
                                style={{ width: `${progress}%` }}
                              ></div>
                            </div>
                            
                            {goal.description && (
                              <p className="text-sm text-gray-600 mt-2">{goal.description}</p>
                            )}
                          </div>
                        </div>
                      );
                    })
                  ) : (
                    <div className="text-center py-8 text-gray-500">
                      –ù–µ–º–∞—î —Ü—ñ–ª–µ–π –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    </div>
                  )}
                </div>
              </div>
            )}
          </div>
        </div>

        {/* –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          <div className="bg-white rounded-xl shadow-sm border p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">üìä –ú–æ—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å</h3>
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <span className="text-gray-600">–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å</span>
                <span className="font-semibold text-green-600">{overview.successRate || 0}%</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-600">–ó–∞–≤–µ—Ä—à–µ–Ω—ñ —Ü—ñ–ª—ñ</span>
                <span className="font-semibold text-blue-600">
                  {overview.completedGoals || 0} / {overview.totalGoals || 0}
                </span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-600">–°–µ—Ä–µ–¥–Ω—è —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å</span>
                <span className="font-semibold text-purple-600">
                  {(overview.completedTrainings || 0) > 0
                    ? formatDuration(Math.round((overview.totalTrainingTime || 0) / (overview.completedTrainings || 1)))
                    : '0 —Ö–≤'
                  }
                </span>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-sm border p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">üéØ –ú–æ—ó –Ω–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏</h3>
            <div className="space-y-4">
              {nextTraining && (
                <div className="flex items-center justify-between p-3 bg-green-50 rounded-lg">
                  <div>
                    <p className="font-medium text-gray-900">–ù–∞—Å—Ç—É–ø–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è</p>
                    <p className="text-sm text-gray-600">
                      {formatDate(nextTraining.date)} –æ {nextTraining.time}
                    </p>
                  </div>
                  <span className="text-green-600 font-medium">{nextTraining.type}</span>
                </div>
              )}
              
              {upcomingTrainings.length > 0 && (
                <div className="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
                  <div>
                    <p className="font-medium text-gray-900">–ú–∞–π–±—É—Ç–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è</p>
                    <p className="text-sm text-gray-600">
                      {upcomingTrainings.length} –≤ —á–µ—Ä–∑—ñ
                    </p>
                  </div>
                  <span className="text-blue-600 font-medium">–ì–æ—Ç—É–π—Å—è!</span>
                </div>
              )}
              
              <div className="flex items-center justify-between p-3 bg-purple-50 rounded-lg">
                <div>
                  <p className="font-medium text-gray-900">–ú–æ—è –Ω–∞—Å—Ç—É–ø–Ω–∞ –º–µ—Ç–∞</p>
                  <p className="text-sm text-gray-600">
                    –î–æ—Å—è–≥—Ç–∏ 80% —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ
                  </p>
                </div>
                <span className="text-purple-600 font-medium">üéØ</span>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}