import React from 'react';
import { renderToString } from 'react-dom/server';
import HeroSection from './Hero';



describe('HeroSection Component', () => {
  test('—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è –±–µ–∑ –ø–æ–º–∏–ª–æ–∫', () => {
    const component = <HeroSection />;
    const htmlString = renderToString(component);
    
    expect(htmlString).toBeTruthy();
    expect(typeof htmlString).toBe('string');
    expect(htmlString.length).toBeGreaterThan(0);
  });

  test('–º—ñ—Å—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫', () => {
    const htmlString = renderToString(<HeroSection />);
    
    expect(htmlString).toContain('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ');
    expect(htmlString).toContain('–¥–æ –Ω–∞—à–æ—ó –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏');
  });

  test('–º—ñ—Å—Ç–∏—Ç—å –æ–ø–∏—Å', () => {
    const htmlString = renderToString(<HeroSection />);
    
    expect(htmlString).toContain('–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ —Ç–∏—Å—è—á—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤');
    expect(htmlString).toContain('–ü–æ—á–Ω—ñ—Ç—å —Å–≤–æ—é –ø–æ–¥–æ—Ä–æ–∂ –≤–∂–µ —Å—å–æ–≥–æ–¥–Ω—ñ');
  });

  test('–º—ñ—Å—Ç–∏—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ href', () => {
    const htmlString = renderToString(<HeroSection />);
    
    expect(htmlString).toContain('href="/signup"');
    expect(htmlString).toContain('href="/signin"');
    expect(htmlString).toContain('–ü–æ—á–∞—Ç–∏ –∑–∞—Ä–∞–∑');
    expect(htmlString).toContain('–£–≤—ñ–π—Ç–∏ –≤ –∞–∫–∞—É–Ω—Ç');
  });

  test('–º—ñ—Å—Ç–∏—Ç—å –≤—Å—ñ –ø–µ—Ä–µ–≤–∞–≥–∏ –∑ —ñ–∫–æ–Ω–∫–∞–º–∏', () => {
    const htmlString = renderToString(<HeroSection />);
    
    expect(htmlString).toContain('–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π —Å—Ç–∞—Ä—Ç');
    expect(htmlString).toContain('–ó—Ä—É—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å');
    expect(htmlString).toContain('–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ 24/7');
    expect(htmlString.match(/‚úì/g)).toHaveLength(3); // 3 —ñ–∫–æ–Ω–∫–∏ –≥–∞–ª–æ—á–∫–∏
  });

  test('–º—ñ—Å—Ç–∏—Ç—å –≤—Å—ñ –µ–º–æ—Ü—ñ—ó –≤ –≤—ñ–∑—É–∞–ª—å–Ω—ñ–π —á–∞—Å—Ç–∏–Ω—ñ', () => {
    const htmlString = renderToString(<HeroSection />);
    
    expect(htmlString).toContain('üöÄ');
    expect(htmlString).toContain('üí°');
    expect(htmlString).toContain('‚≠ê');
    expect(htmlString).toContain('‚ú®');
  });

  test('–º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É Tailwind CSS –∫–ª–∞—Å—ñ–≤', () => {
    const htmlString = renderToString(<HeroSection />);
    
    // –û—Å–Ω–æ–≤–Ω—ñ –∫–ª–∞—Å–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    expect(htmlString).toContain('min-h-screen');
    expect(htmlString).toContain('bg-gradient-to-br');
    expect(htmlString).toContain('from-blue-600');
    expect(htmlString).toContain('via-purple-600');
    expect(htmlString).toContain('to-indigo-800');
    
    // Grid —Å–∏—Å—Ç–µ–º–∞
    expect(htmlString).toContain('grid grid-cols-1');
    expect(htmlString).toContain('lg:grid-cols-2');
    
    // –¢–µ–∫—Å—Ç–æ–≤–∏–π –≥—Ä–∞–¥—ñ—î–Ω—Ç
    expect(htmlString).toContain('bg-gradient-to-r');
    expect(htmlString).toContain('bg-clip-text');
    expect(htmlString).toContain('text-transparent');
  });

  test('–º—ñ—Å—Ç–∏—Ç—å –≤—Å—ñ –∞–Ω—ñ–º–∞—Ü—ñ–π–Ω—ñ –∫–ª–∞—Å–∏', () => {
    const htmlString = renderToString(<HeroSection />);
    
    expect(htmlString).toContain('animate-float');
    expect(htmlString).toContain('animation-delay-1000');
    expect(htmlString).toContain('animation-delay-2000');
  });

  test('–º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∫–ª–∞—Å–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫', () => {
    const htmlString = renderToString(<HeroSection />);
    
    expect(htmlString).toContain('bg-gradient-to-r from-red-500 to-orange-500');
    expect(htmlString).toContain('bg-white/10 backdrop-blur-sm');
    expect(htmlString).toContain('hover:-translate-y-1');
    expect(htmlString).toContain('transition-all duration-300');
  });

  test('–≤—ñ–∑—É–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ –º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏', () => {
    const htmlString = renderToString(<HeroSection />);
    
    expect(htmlString).toContain('w-80 h-80');
    expect(htmlString).toContain('lg:w-96 lg:h-96');
    expect(htmlString).toContain('rounded-2xl');
  });

  test('—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω—ñ —Å—Ç–∏–ª—ñ', () => {
    const htmlString = renderToString(<HeroSection />);
    
    expect(htmlString).toContain('bg-gradient-to-br from-yellow-400 to-orange-500');
    expect(htmlString).toContain('rounded-3xl');
    expect(htmlString).toContain('–í–∞—à —É—Å–ø—ñ—Ö –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è —Ç—É—Ç');
  });
});

describe('HeroSection Structure', () => {
  test('–º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω—É HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É', () => {
    const htmlString = renderToString(<HeroSection />);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ HTML —Ç–µ–≥–∏
    expect(htmlString).toContain('<section');
    expect(htmlString).toContain('</section>');
    expect(htmlString).toContain('<h1');
    expect(htmlString).toContain('</h1>');
    expect(htmlString).toContain('<p');
    expect(htmlString).toContain('</p>');
    expect(htmlString).toContain('<div');
  });

  test('–ø–æ—Å–∏–ª–∞–Ω–Ω—è –º–∞—é—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∫–ª–∞—Å–∏', () => {
    const htmlString = renderToString(<HeroSection />);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –º–∞—é—Ç—å Tailwind –∫–ª–∞—Å–∏
    expect(htmlString).toContain('px-8 py-4');
    expect(htmlString).toContain('rounded-xl');
    expect(htmlString).toContain('font-semibold');
  });
});

describe('HeroSection Snapshot', () => {
  test('–≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î snapshot', () => {
    const htmlString = renderToString(<HeroSection />);
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ snapshot –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    expect(htmlString).toMatchSnapshot();
  });

  test('snapshot –º—ñ—Å—Ç–∏—Ç—å –∫–ª—é—á–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏', () => {
    const htmlString = renderToString(<HeroSection />);
    const snapshot = htmlString;
    
    expect(snapshot).toContain('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ');
    expect(snapshot).toContain('/signup');
    expect(snapshot).toContain('/signin');
    expect(snapshot).toContain('üöÄ');
  });
});

describe('HeroSection Accessibility', () => {
  test('–º—ñ—Å—Ç–∏—Ç—å —Å–µ–º–∞–Ω—Ç–∏—á–Ω—ñ HTML —Ç–µ–≥–∏', () => {
    const htmlString = renderToString(<HeroSection />);
    
    expect(htmlString).toContain('<section'); // –°–µ–º–∞–Ω—Ç–∏—á–Ω–∏–π —Ç–µ–≥ —Å–µ–∫—Ü—ñ—ó
    expect(htmlString).toContain('<h1'); // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä—à–æ–≥–æ —Ä—ñ–≤–Ω—è
  });

  test('–ø–æ—Å–∏–ª–∞–Ω–Ω—è –º–∞—é—Ç—å –∑—Ä–æ–∑—É–º—ñ–ª–∏–π —Ç–µ–∫—Å—Ç', () => {
    const htmlString = renderToString(<HeroSection />);
    
    expect(htmlString).toContain('–ü–æ—á–∞—Ç–∏ –∑–∞—Ä–∞–∑');
    expect(htmlString).toContain('–£–≤—ñ–π—Ç–∏ –≤ –∞–∫–∞—É–Ω—Ç');
  });
});